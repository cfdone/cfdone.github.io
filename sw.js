const t="cfdone-v1",s=["/","/index.html","/favicon.svg","/favicon.ico","/apple-touch-icon.png","/android-chrome-192x192.png","/android-chrome-512x512.png"];self.addEventListener("install",i=>{console.log("Service Worker: Installing..."),i.waitUntil(caches.open(t).then(e=>(console.log("Service Worker: Caching static assets"),e.addAll(s))).then(()=>(console.log("Service Worker: Installation complete"),self.skipWaiting())).catch(e=>{console.error("Service Worker: Installation failed",e)}))});self.addEventListener("activate",i=>{console.log("Service Worker: Activating..."),i.waitUntil(caches.keys().then(e=>Promise.all(e.map(o=>{if(o!==t)return console.log("Service Worker: Deleting old cache",o),caches.delete(o)}))).then(()=>(console.log("Service Worker: Activation complete"),self.clients.claim())))});self.addEventListener("fetch",i=>{i.request.method==="GET"&&i.request.url.startsWith("http")&&i.respondWith(caches.match(i.request).then(e=>e||fetch(i.request).then(o=>{if(!o||o.status!==200||o.type!=="basic")return o;const c=o.clone();return caches.open(t).then(r=>{r.put(i.request,c)}),o})).catch(()=>{if(i.request.destination==="document")return caches.match("/index.html")}))});self.addEventListener("sync",i=>{console.log("Service Worker: Background sync triggered",i.tag),i.tag==="schedule-notifications"&&i.waitUntil(n())});self.addEventListener("push",i=>{if(console.log("Service Worker: Push notification received"),i.data){const e=i.data.json(),o={body:e.body,icon:"/favicon.svg",badge:"/favicon.svg",vibrate:[200,100,200],tag:e.tag||"cfdone-notification",data:e.data||{},actions:e.actions||[{action:"view",title:"View Schedule",icon:"/favicon.svg"},{action:"dismiss",title:"Dismiss",icon:"/favicon.svg"}]};i.waitUntil(self.registration.showNotification(e.title,o))}});self.addEventListener("notificationclick",i=>{console.log("Service Worker: Notification clicked",i.action),i.notification.close(),i.action==="view"?i.waitUntil(self.clients.matchAll({type:"window",includeUncontrolled:!0}).then(e=>{for(const o of e)if(o.url.includes(self.location.origin))return o.focus();return self.clients.openWindow("/")})):i.action==="dismiss"?console.log("Notification dismissed"):i.waitUntil(self.clients.openWindow("/"))});self.addEventListener("notificationclose",()=>{console.log("Service Worker: Notification closed")});self.addEventListener("message",i=>{console.log("Service Worker: Message received",i.data),i.data&&i.data.type==="SCHEDULE_NOTIFICATIONS"?n():i.data&&i.data.type==="CLEAR_NOTIFICATIONS"&&a()});async function n(){try{console.log("Service Worker: Scheduling notifications...");const i=await self.clients.matchAll();i.length>0&&i[0].postMessage({type:"SCHEDULE_NOTIFICATIONS_REQUEST"})}catch(i){console.error("Service Worker: Error scheduling notifications",i)}}async function a(){try{(await self.registration.getNotifications()).forEach(e=>e.close()),console.log("Service Worker: Cleared all notifications")}catch(i){console.error("Service Worker: Error clearing notifications",i)}}self.addEventListener("periodicsync",i=>{console.log("Service Worker: Periodic sync triggered",i.tag),i.tag==="schedule-daily-notifications"&&i.waitUntil(n())});console.log("Service Worker: Script loaded");
